// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use serde::{Deserialize, Serialize};

use crate::{
    Document, ImageContextSession, NodeQuery, SerializedFigmaDoc, SerializedFigmaDocHeader,
    ServerFigmaDoc,
};

#[derive(Serialize, Deserialize)]
struct IgnoredImage<'r> {
    node: &'r str,
    images: Vec<String>,
}

fn serde_ok_or_none<'de, D, T>(deserializer: D) -> Result<Option<T>, D::Error>
where
    D: serde::Deserializer<'de>,
    T: Deserialize<'de>,
{
    let v = serde_json::Value::deserialize(deserializer)?;
    Ok(T::deserialize(v).ok())
}

#[derive(Serialize, Deserialize)]
pub struct ConvertRequest<'r> {
    figma_api_key: &'r str,
    // Node names
    queries: Vec<&'r str>,
    // Ignored images
    ignored_images: Vec<IgnoredImage<'r>>,

    // Last modified comes from the previously fetched document and is
    // used to avoid fetching the same doc version over and over.
    last_modified: Option<String>,

    // The version also comes from the previously fetched document. When certain
    // properties of a Figma doc like a new branch changes, the version gets
    // updated but the last_modified field does not.
    version: Option<String>,

    // Image session also comes from the previously fetched document. We allow this
    // to fail decoding, in case we're receiving a request from a client that has an
    // image session generated by an old version.
    #[serde(deserialize_with = "serde_ok_or_none")]
    image_session: Option<ImageContextSession>,
}

#[derive(Serialize, Deserialize)]
pub enum ConvertResponse {
    Document(Vec<u8>),
    Unmodified(String),
}

pub fn fetch_doc(id: &str, rq: ConvertRequest) -> Result<ConvertResponse, crate::Error> {
    if let Some(mut doc) = Document::new_if_changed(
        rq.figma_api_key,
        id.into(),
        rq.last_modified.unwrap_or(String::new()),
        rq.version.unwrap_or(String::new()),
        rq.image_session.clone(),
    )? {
        // The document has changed since the version the client has, so we should fetch
        // a new copy.
        let mut error_list: Vec<String> = vec![];
        let nodes = doc.nodes(
            &rq.queries.iter().map(NodeQuery::name).collect(),
            &rq.ignored_images
                .iter()
                .map(|imgref| (NodeQuery::name(imgref.node), imgref.images.clone()))
                .collect(),
            &mut error_list,
        )?;

        let figma_doc = SerializedFigmaDoc {
            nodes,
            component_sets: doc.component_sets().clone(),
            images: doc.encoded_image_map(),
            last_modified: doc.last_modified().clone(),
            name: doc.get_name(),
            version: doc.get_version(),
            id: doc.get_document_id(),
        };
        let mut response = bincode::serialize(&SerializedFigmaDocHeader::current())?;
        response.append(&mut bincode::serialize(&ServerFigmaDoc {
            figma_doc,
            errors: error_list,
            branches: doc.branches.clone(),
            project_files: vec![],
        })?);

        // Return the image session as a JSON blob; we might want to encode this differently so we
        // can be more robust if there's corruption.
        response.append(&mut serde_json::to_vec(&doc.image_session())?);

        Ok(ConvertResponse::Document(response))
    } else {
        Ok(ConvertResponse::Unmodified("x".into()))
    }
}
