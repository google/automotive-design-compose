// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package designcompose.definition.layout;

option java_multiple_files = true;
option java_package = "com.android.designcompose.definition.layout";
option optimize_for = LITE_RUNTIME;

// Represents a span for a node within a grid layout.
message GridSpan {
  string node_name = 1;
  map<string, string> node_variant = 2;
  uint32 span = 3;
  bool max_span = 4;
}
// Defines the type of grid layout used for a view.
enum GridLayoutType {
  GRID_LAYOUT_TYPE_UNSPECIFIED = 0;
  GRID_LAYOUT_TYPE_FIXED_COLUMNS = 1;
  GRID_LAYOUT_TYPE_FIXED_ROWS = 2;
  GRID_LAYOUT_TYPE_AUTO_COLUMNS = 3;
  GRID_LAYOUT_TYPE_AUTO_ROWS = 4;
  GRID_LAYOUT_TYPE_HORIZONTAL = 5;
  GRID_LAYOUT_TYPE_VERTICAL = 6;
}
// Defines how content overflows the bounds of a view.
enum Overflow {
  OVERFLOW_UNSPECIFIED = 0;
  OVERFLOW_VISIBLE = 1;
  OVERFLOW_HIDDEN = 2;
  OVERFLOW_SCROLL = 3;
}
// Defines the direction of overflow scrolling
enum OverflowDirection {
  OVERFLOW_DIRECTION_UNSPECIFIED = 0;
  OVERFLOW_DIRECTION_NONE = 1;
  OVERFLOW_DIRECTION_HORIZONTAL_SCROLLING = 2;
  OVERFLOW_DIRECTION_VERTICAL_SCROLLING = 3;
  OVERFLOW_DIRECTION_HORIZONTAL_AND_VERTICAL_SCROLLING = 4;
}

// Defines how flex items wrap when they exceed the available space.
enum FlexWrap {
  FLEX_WRAP_UNSPECIFIED = 0;
  FLEX_WRAP_NO_WRAP = 1;
  FLEX_WRAP_WRAP = 2;
  FLEX_WRAP_WRAP_REVERSE = 3;
}
// Defines how a view's size is determined.
enum LayoutSizing {
  LAYOUT_SIZING_UNSPECIFIED = 0;
  LAYOUT_SIZING_FIXED = 1;
  LAYOUT_SIZING_HUG = 2;
  LAYOUT_SIZING_FILL = 3;
}

// Represents information about the scroll state of a view, including the
// overflow direction and whether paged scrolling is enabled.
message ScrollInfo {
  OverflowDirection overflow = 1;
  bool paged_scrolling = 2;
}

// Defines the spacing between items in a layout. It can be either
// a fixed value or an "auto" value, which will be calculated based on the
// available space.
message ItemSpacing {
  // Specifies an "auto" spacing value. It contains the desired width and
  // height of the spacing.
  message Auto {
    int32 width = 1;
    int32 height = 2;
  }
  oneof type {
    int32 fixed = 1;
    Auto auto = 2;
  }
}
