// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package designcompose.definition.view;

import "definition/view/text_style.proto";
import "definition/view/view_style.proto";
import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "com.android.designcompose.definition.view";
option optimize_for = LITE_RUNTIME;

// Figma component properties can be "overridden" in the UI. These overrides
// are applied in the node tree we get back from Figma, so we don't have to
// worry about them, unless we present a variant of a component as a result of
// an interaction. In that case, we need to figure out what has been overridden
// and apply it to the variant. This struct keeps track of those overrides that
// need to be applied to variant instances.
message ComponentOverrides {
  ViewStyle style = 1;
  oneof component_content_override {
    google.protobuf.Empty none = 2;
    string text = 3;
    StyledText styled_text = 4;
  }
}

// Details on the Figma component that this view is an instance of.
message ComponentInfo {
  string id = 1;
  string name = 2;
  string component_set_name = 3;
  // Currently we only figure out overrides for the root of a component, but
  // soon we will want to compute them for the whole tree.
  ComponentOverrides overrides = 4;
}
