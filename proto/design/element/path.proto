// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package com.android.designcompose.proto.design.element;

import "design/modifier/background.proto";

option java_multiple_files = true;

message Path {
  enum WindingRule {
    WINDING_RULE_UNSPECIFIED = 0;
    WINDING_RULE_NON_ZERO = 1;
    WINDING_RULE_EVEN_ODD = 2;
    WINDING_RULE_NONE = 3;
  }

  bytes commands = 1;
  repeated float data = 2;
  WindingRule winding_rule = 3;
}


message Arc {
  enum StrokeCap {
    STROKE_CAP_UNSPECIFIED = 0;
    STROKE_CAP_NONE = 1;
    STROKE_CAP_ROUND = 2;
    STROKE_CAP_SQUARE = 3;
    STROKE_CAP_LINE_ARROW = 4;
    STROKE_CAP_TRIANGLE_ARROW = 5;
    STROKE_CAP_CIRCLE_FILLED = 6;
    STROKE_CAP_DIAMOND_FILLED = 7; // Not supported
  }

  repeated Path paths = 1;
  repeated Path strokes = 2;
  StrokeCap stroke_cap = 3;
  float start_angle_degrees = 4;
  float sweep_angle_degrees = 5;
  float inner_radius = 6;
  float corner_radius = 7;
  bool is_mask = 8;
}

message LineHeight {
  oneof line_height {
    float pixels = 1;
    float percent = 2;
  }
}

enum StrokeAlign {
  STROKE_ALIGN_UNSPECIFIED = 0;
  // The stroke is entirely within the containing view. The stroke's outer edge
  // matches the outer edge of the containing view.
  STROKE_ALIGN_INSIDE = 1;
  // The stroke is centered on the edge of the containing view, and extends into
  // the view on the inside, and out of the view on the outside.
  STROKE_ALIGN_CENTER = 2;
  // The stroke is entirely outside of the view. The stroke's inner edge is the
  // outer edge of the containing view.
  STROKE_ALIGN_OUTSIDE = 3;
}

message StrokeWeight {
  message Individual {
    float top = 1;
    float right = 2;
    float bottom = 3;
    float left = 4;
  }
  // One weight is used for all sides.
  // Individual weights for each side (typically only applied on boxes).
  oneof stroke_weight {
    float uniform = 1;
    Individual individual = 2;
  }
}

message Stroke {
  StrokeAlign stroke_align = 1;
  StrokeWeight stroke_weight = 2;
  repeated modifier.Background strokes = 3;

}
