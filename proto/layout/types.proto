// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package com.android.designcompose.layout.proto;
option java_multiple_files = true;

/** Dimension in Rust is an union-type enum, which are represented in proto by
`oneof` structures. `oneof` isn't a message type by itself, so in order to
re-use the Dimension oneof it needs to go into a `DimensionProto` message.
*/

message DimensionProto {
  // Has no data
  message Undefined {};
  // Has no data
  message Auto {};
  oneof Dimension {
    Undefined undefined = 1;
    Auto auto = 2;
    float points = 3;
    float percent = 4;
  }
}

/* The `Rect` type is generic/templated in Rust, which isn't supported in
 * protobuf. Instead we will define individual messages for each type of
 * `Rect` that we use.
 */

message DimensionRect {
  DimensionProto start = 1;
  DimensionProto end = 2;
  DimensionProto top = 3;
  DimensionProto bottom = 4;
}

/* The `Size` type is generic/templated in Rust, which isn't supported in
 * protobuf. Instead we will define individual messages for each type of
 * `Size` that we use.
 */

message FloatSize {
  float width = 1;
  float height = 2;
}
