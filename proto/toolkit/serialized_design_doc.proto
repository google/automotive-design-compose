// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package com.android.designcompose.proto.toolkit;

import "definition/element/variable.proto";
import "definition/view/view.proto";

option java_multiple_files = true;

// A serialized Figma design document, containing views, images, component sets,
// version, ID, and variable map. It's used for storing and loading Figma
// designs in a DesignCompose project.
message SerializedDesignDoc {
  string last_modified = 1;
  map<string, definition.view.View> views = 2;
  EncodedImageMap images = 3;
  string name = 4;
  map<string, string> component_sets = 5;
  string version = 6;
  string id = 7;
  definition.element.VariableMap variable_map = 8;
}
/// We can fetch figma documents in a project or from branches of another
/// document. We store each as a name and ID
message FigmaDocInfo {
  string name = 1;
  string id = 2;
  string version_id = 3;
}
// This is the struct we send over to the client. It contains the serialized
// document along with some extra data: document branches, project files, and
// errors
message ServerFigmaDoc {
  SerializedDesignDoc figma_doc = 1;
  repeated FigmaDocInfo branches = 2;
  repeated FigmaDocInfo project_files = 3;
  repeated string errors = 4;
}

// A message used to identify a specific Figma node within a design document. It
// supports different ways to specify the node, including by its ID, name,
// variant (name and parent), or component set.
message NodeQuery {
  // A Node that is a variant, so the name may have multiple properties
  // The first string is the node name and the second is its parent's name
  message NodeVariant {
    string name = 1;
    string parent = 2;
  }
  oneof NodeQuery {
    string node_id = 1;
    string node_name = 2;
    NodeVariant node_variant = 3;
    string node_component_set = 4;
  }
}

// EncodedImageMap contains a mapping from ImageKey to network bytes. It can
// create an ImageMap and is intended to be used when we want to use
// Figma-defined components but do not want to communicate with the Figma
// service.
message EncodedImageMap {map<string, EncodedImage> images = 1;}

// A raw image
message EncodedImage {
  bytes data = 1;
  string mime_type = 2;
}
