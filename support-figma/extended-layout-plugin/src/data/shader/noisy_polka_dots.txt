// Noisy polka dots - Source: https://www.shadertoy.com/view/mlSGRw
// Fork of "polka dots" by meetar. https://shadertoy.com/view/ldXSRs
// 2023-01-06 11:32:02

const float rad = 0.15;
const vec2 mid = vec2(0.5);
const ivec2 reps = ivec2(96, 96);
const float angle = 45.0;
const float RADIANS = angle * 0.0174532;
// rotation matrix
mat2 rot = mat2(vec2(cos(RADIANS), -sin(RADIANS)), vec2(sin(RADIANS), cos(RADIANS)));

/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */
vec3 random3(vec3 c) {
	float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
	vec3 r;
	r.z = fract(512.0*j);
	j *= .125;
	r.x = fract(512.0*j);
	j *= .125;
	r.y = fract(512.0*j);
	return r-0.5;
}

/* skew constants for 3d simplex functions */
const float F3 =  0.3333333;
const float G3 =  0.1666667;

/* 3d simplex noise */
float simplex3d(vec3 p) {
	 /* 1. find current tetrahedron T and it's four vertices */
	 /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
	 /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/
	 
	 /* calculate s and x */
	 vec3 s = floor(p + dot(p, vec3(F3)));
	 vec3 x = p - s + dot(s, vec3(G3));
	 
	 /* calculate i1 and i2 */
	 vec3 e = step(vec3(0.0), x - x.yzx);
	 vec3 i1 = e*(1.0 - e.zxy);
	 vec3 i2 = 1.0 - e.zxy*(1.0 - e);
	 	
	 /* x1, x2, x3 */
	 vec3 x1 = x - i1 + G3;
	 vec3 x2 = x - i2 + 2.0*G3;
	 vec3 x3 = x - 1.0 + 3.0*G3;
	 
	 /* 2. find four surflets and store them in d */
	 vec4 w, d;
	 
	 /* calculate surflet weights */
	 w.x = dot(x, x);
	 w.y = dot(x1, x1);
	 w.z = dot(x2, x2);
	 w.w = dot(x3, x3);
	 
	 /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
	 w = max(0.6 - w, 0.0);
	 
	 /* calculate surflet components */
	 d.x = dot(random3(s), x);
	 d.y = dot(random3(s + i1), x1);
	 d.z = dot(random3(s + i2), x2);
	 d.w = dot(random3(s + 1.0), x3);
	 
	 /* multiply d by w^4 */
	 w *= w;
	 w *= w;
	 d *= w;
	 
	 /* 3. return the sum of the four surflets */
	 return dot(d, vec4(52.0));
}

/* const matrices for 3d rotation */
const mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);
const mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);
const mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);

/* directional artifacts can be reduced by rotating each octave */
float simplex3d_fractal(vec3 m) {
    return   0.5333333*simplex3d(m*rot1);

}

float random (vec2 st, float seed)  {
    return fract(sin(dot(st.xy,vec2(seed, 0.233)))*43761.777);
}



// blue secondary
vec3 colorA = vec3(0.486, 0.69, 0.996);
// red, primary
vec3 colorB = vec3(0.909, 0.258, 0.0);

// yellow, tertiary
vec3 colorC = vec3(1.0, 0.83, 0.356);

float quadraticInOut(float t) {
  float p = 2.0 * t * t;
  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;
}


vec4 main( vec2 fragCoord ){
	// the uv.. we are calling it p for pixel
	vec2 p = fragCoord.xy / iResolution.xy;
	// account for non square image aspect
	p.y *= float(iResolution.y )/ float(iResolution.x);
	//rotating the whole scene	

	
	
	// q is just an offset - .5
	vec2 q = p - vec2(0.5, 0.5);
	
	
	//=====================
	// wave
	//=====================
	
	// creates a repeating 0-1 range
	vec2 repeat = vec2(fract(q.x * float(reps.x)), fract(q.y * float(reps.y)) );	
	
	// holds the color
	vec3 col = vec3(0.671,0.671,0.671);
	
	vec2 distFromMid = repeat - mid;
	
	// drawing circles based on distance from center of each cell
	float dist = length(distFromMid);
	// aliased method
	float circ = dist < rad ? 1.0 : 0.0;
	// anti-aliased
	//float sharpness = 50.;
	//float circ = rad * sharpness - dist * sharpness;
	// for black on white, subtract rad from dist
	
	col *= vec3(circ);
    
    
    vec2 mousePos = iMouse.xy / iResolution.x;
	vec2 pNoise = fragCoord.xy/iResolution.x;
	vec3 p3 = vec3(pNoise, iTime*0.35);
	
	float value;
	
    // increase the amount of circles here
    value = simplex3d_fractal(p3*1.2+1.0);
    
    // mess around with what colors you want most
	value = 0.15 + 1.5*value;
    
    // if px position is near mousepos
    // increase value
    
    float distNoise = pow(distance(mousePos, pNoise), 1.0);
    distNoise = 1.0 - quadraticInOut(distNoise+0.3);
    
    value += distNoise*0.2;
    
    vec3 dotColor = vec3(value);
   
    // added a bit of grain on top
    dotColor += random(pNoise, iTime * 100.0) * 0.04;
   
    col = (col*0.3) + (dotColor * col);
    return vec4(col,1.0);
}